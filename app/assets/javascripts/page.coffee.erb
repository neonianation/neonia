$ ->
  
  'use strict'
    
  
  initSkrollr = ->
    if !(/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i).test(navigator.userAgent or navigator.vendor or  window.opera)
      s = skrollr.init({
      forceHeight: false
      })

      #$(document).on 'page:load', ->
      #  skrollr.init().refresh(); 

      #The options (second parameter) are all optional. The values shown are the default values.
      skrollr.menu.init(s, {
      #skrollr will smoothly animate to the new position using `animateTo`.
      animate: true,

      #The easing function to use.
      easing: 'sqrt',

      #Multiply your data-[offset] values so they match those set in skrollr.init
      scale: 2,

      #How long the animation should take in ms.
      duration: (currentTop, targetTop) ->
      #By default, the duration is hardcoded at 500ms.
          return 500;

          #But you could calculate a value based on the current scroll position (`currentTop`) and the target scroll position (`targetTop`).
          #return Math.abs(currentTop - targetTop) * 10;
      ,

      #By default skrollr-menu will only react to links whose href attribute contains a hash and nothing more, e.g. `href="#foo"`.
      #If you enable `complexLinks`, skrollr-menu also reacts to absolute and relative URLs which have a hash part.
      #The following will all work (if the user is on the correct page):
      #http://example.com/currentPage/#foo
      #http://example.com/currentDir/currentPage.html?foo=bar#foo
      #/?foo=bar#foo
      complexLinks: false,

      #This event is triggered right before we jump/animate to a new hash.
      #change: (newHash, newTopPosition) ->
      })
  
  #homeResize function makes sure home bg image is same height as dark overlay
#  homeResize = ->
#    if $("#home > .overlay").height() < $(window).height()
#      $("#home > .overlay").height($(window).height())    
#    $("#home").height($("#home > .overlay").height())
#    initSkrollr()
#    $('[data-spy="scroll"]').each ->
#      $spy = $(this).scrollspy('refresh')
#  
#  $(window).resize(homeResize).triggerHandler "resize"
#  homeResize()
  
  # close mobile menu on click. adapted from: http://stackoverflow.com/questions/16680543/hide-twitter-bootstrap-nav-collapse-on-click
  $('.nav a').on 'click', ->
    $(".navbar-toggle:visible").click() #bootstrap 3.x by Richard

  ##############################################
  ################ NEW WORLD ###################
  ##############################################
  
  # show the correct tab when clicking on the new-world icons
  $('#new-world .hover-icon').click ->
    if !$(this).hasClass("active")
      # make the right button highlighted
      $('#new-world .hover-icon.active').removeClass("active")
      $(this).addClass("active")

      # make the right tab show up
      $('#new-world .tab-pane.activated').removeClass("activated").hide()
      $('#new-world .tab-pane:nth-child('+(parseInt($(this).attr("id").substr("new-world_icon_".length))+1)+')').addClass("activated").fadeIn()

  ##############################################
  ################# JOIN US ####################
  ##############################################      

  # CLEAR ERRORS
  # clears all current errors from above form
  window.clearErrors = clearErrors = ->
    $("#user-form-errors").html("")

  # ADD ERROR (message)
  # adds an error with message to form
  window.addError = addError = (message) ->
    alert = $("<div>")
    alert.addClass("alert alert-danger alert-dismissible fade in")
    alert.html('<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>' + message)
    $("#user-form-errors").append(alert)  
    
  # INITIATE MANUALLY-FIRED SUBMIT BUTTON
  # changes submit button, so that we can manually fire upload
  oldButton = $('#user-form input[type="submit"]');
  newButton = $("<div>")
  newButton.html(oldButton.val())
  newButton.attr("class", oldButton.attr("class"))
  $('#user-form input[type="submit"]').replaceWith(newButton)
  $('#user-form .submit-form').attr("data-loading-text", "Loading...")
  
  # INIT VARIABLES
  user_photo = null
  
  $('#user-form .submit-form').click ->
    
    # toggle loading state
    $(this).button('loading')
    
    formData = new FormData()
    
    # add user photo
    if user_photo != null then formData.append('user[photo]', user_photo)
    
    
    # collect form data from text and checkbox
    $('#user-form input[type="text"]').each (index, element) =>
      formData.append($(element).attr("name"), $(element).val())
    $('#user-form input[type="checkbox"]').each (index, element) =>
      formData.append($(element).attr("name"), if $(element).is(':checked') then 1 else 0)
    $('#user-form input[type="hidden"]').each (index, element) =>
      formData.append($(element).attr("name"), $(element).val())

    $('#user-success .photo').css('background-image', 'url(' +  user_photo + ')')

    # send request over
    $.ajax({
      url: $("#user-form form").attr("action"),
      data: formData,
      cache: false,
      contentType: false,
      processData: false,
      type: 'POST'
    })
  
  # HIDE E-MAIL FIELD
  # if subscribe checkbox is NOT checked, then hide e-mail field
  if !$('#user-form input[type="checkbox"]').is(':checked')
    $('#user-form .email').hide(0)
  
  # TOGGLE E-MAIL FIELD
  # show e-mail field when checking subscribe checkbox
  $('#user-form input[type="checkbox"]').change ->
    $(this).parent().toggleClass("btn-success")
    $(this).parent().next().slideToggle() # toggle help text
    $('#user-form .email').slideToggle() # toggle email field
      
  # SHOW FOCUS ON FILE DIALOG
  # check for focus event on file select and then make parent active
  $('#user-form input[type="file"]').focus ->
    $(this).parent().addClass("active")
  $('#user-form input[type="file"]').focusout ->
    $(this).parent().removeClass("active")
    
  # SHOW IMAGE PREVIEW
  # shows image preview on file select action
  # script from: http://www.munocreative.com/nerd-notes/justpayme
  $('#user-form input[type="file"]').change ->
    
    # show processing
    $('#user-form .upload-photo').removeAttr("style")
    $('#user-form .upload-photo').css('background-image', "url( <%= asset_data_uri 'processing.png' %> )")
    
    # start processing
    readURL(this)

    
  readURL = (input) ->
    
    # validate image
    # from: http://www.sanwebe.com/2013/10/check-input-file-size-before-submit-file-api-jquery
    #get the file size and file type from file input field
    fsize = input.files[0].size
    ftype = input.files[0].type
    fname = input.files[0].name
     
    # get only the first part of filetype
    ftype = ftype.split("/")[0]
      
    switch ftype
      when 'image'
        break
      else
        clearErrors()
        addError("Only image files are supported.")
        resetFileInput()
    
    if input.files && input.files[0]
      reader = new FileReader()

      reader.onload = (e) ->
        
        # resize/scale image
        image = new Image()
        image.src = e.target.result
        

        
        image.onload = ->
          setUserFormImage(scaleImage(image, 200, 200))
        

        
      reader.readAsDataURL(input.files[0])
    
  # SCALE IMAGE (src, width, height
  # scales src image to width and height (box fill) and returns scaled_img
  scaleImage = (source, width, height) ->
    canvas = document.createElement( 'canvas' )
    canvas.width = width
    canvas.height = height
    context = canvas.getContext( '2d' )
    
    # calculate clipping points
    clip_x = 0
    clip_y = 0
    clip_w = source.width
    clip_h = source.height
    if source.width > source.height
      clip_x = source.width/2 - source.height/2
      clip_w = source.height
    else
      clip_y = source.height/2 - source.width/2
      clip_h = source.width
      
    
    # draw image: source, clippings, position
    context.drawImage(source,
                      clip_x, clip_y, clip_w, clip_h,
                      0, 0, width, height)
    return canvas.toDataURL()
  
  # CLEAR IMAGE
  # clear old image from file dialog on (re-)loading page
  resetFileInput = ->
    $('#user-form .upload-photo').removeAttr("style")
    $('#user-form input[type="file"]').val('')
  
  resetFileInput()
  $('#user-success').hide(0)
  
  # SET USER FORM NAME
  window.setUserFormName = (name) ->
    $("#user-form .name input").val(name)
    
  # SET USER FORM EMAIL
  window.setUserFormEmail = (email) ->
    $("#user-form .email input").val(email);
      
  # SET USER FORM IMAGE
  window.setUserFormImage = (imageData) ->
    user_photo = imageData
    
    # preview image
    $('#user-form .upload-photo').removeAttr("style")
    $('#user-form .upload-photo').css('background-image', 'url(' +  user_photo + ')')
  
  return